import fs from "fs/promises";
import path from "path";
import { allPosts } from "../.contentlayer/generated/index.mjs";

const slugify = (text) => {
  return text
    .toString()
    .toLowerCase()
    .replace(/\s+/g, "-") // Replace spaces with -
    .replace(/[^\w-]+/g, "") // Remove all non-word chars
    .replace(/--+/g, "-") // Replace multiple - with single -
    .replace(/^-+/, "") // Trim - from start of text
    .replace(/-+$/, ""); // Trim - from end of text
};

/**
 * @typedef {{ name: string; count: number; slug: string }} CategoryCount
 */

/**
 * @returns {CategoryCount[]}
 */
const sumCategories = () => {
  /** @type {Record<string, number>} */
  const categoryCounts = allPosts.reduce((acc, post) => {
    post.category.forEach((cat) => {
      if (cat) {
        acc[cat] = (acc[cat] || 0) + 1;
      }
    });
    return acc;
  }, {});

  const sortedCategories = Object.entries(categoryCounts)
    .map(([name, count]) => ({ name, count, slug: slugify(name) }))
    .sort((a, b) => b.count - a.count);

  return sortedCategories;
};

const generateCategoriesFile = async () => {
  const categories = sumCategories();
  const outputPath = path.join(
    process.cwd(),
    "src/app/(content)/blog/categories.ts"
  );
  const fileContent = `
// This file is auto-generated by \`npm run gen:categories\`. Do not edit it manually.

export type CategoryCount = {
  name: string;
  count: number;
  slug: string;
};

export const categories: CategoryCount[] = ${JSON.stringify(
    categories,
    null,
    2
  )};
`;

  try {
    await fs.writeFile(outputPath, fileContent);
    console.log("✅ Categories file generated successfully!");
  } catch (error) {
    console.error("❌ Error generating categories file:", error);
  }
};

generateCategoriesFile();
